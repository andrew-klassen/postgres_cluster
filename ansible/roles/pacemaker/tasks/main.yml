
- name: install pacemaker
  apt:
     name: "{{ packages }}"
  vars:
     packages:
     - pacemaker
     - pcs

- name: install pacemaker on local host (for corosync key generation)
  apt:
     name: "{{ packages }}"
  vars:
     packages:
     - pacemaker
     - pcs
     - haveged
  delegate_to: 127.0.0.1

- name: check if corosync key exists
  stat: 
    path: source/authkey
  register: authkey
  delegate_to: 127.0.0.1

- name: start and disable haveged
  service:
    name: haveged
    state: started
    enabled: no
  delegate_to: 127.0.0.1

- name: generate corosync key
  command: corosync-keygen -k "{{ playbook_path }}/source/authkey"
  when: authkey.stat.exists == false
  delegate_to: 127.0.0.1
  run_once: true

- name: stop haveged
  service:
    name: haveged
    state: stopped
  delegate_to: 127.0.0.1

- name: copy auth key
  copy:
    src: source/authkey
    dest: /etc/corosync/authkey
    owner: root
    group: root
    mode: '0400'

- name: template corosync config
  template:
    src: source/corosync.conf
    dest: /etc/corosync/corosync.conf

- name: create service.d directory
  file:
    path: /etc/corosync/service.d
    state: directory

- name: copy pcmk
  copy:
    src: source/pcmk
    dest: /etc/corosync/service.d/pcmk

- name: start corosync on boot
  lineinfile:
    path: /etc/default/corosync
    line: START=yes

- name: start and enable corosync
  service:
    name: corosync
    state: restarted
    enabled: yes

- name: start and enable pacemaker
  service:
    name: pacemaker
    state: restarted
    enabled: yes

- name: disable stonith
  command: pcs property set stonith-enabled=false
  run_once: true

- name: add cluster_ip
  command: pcs resource create cluster_ip ocf:heartbeat:IPaddr2 ip={{ cluster_ip }} cidr_netmask={{ cidr }} op monitor interval=20s
  register: cluster_ip
  failed_when: "'already exists' in cluster_ip.stderr and '' not in cluster_ip.stderr"
  changed_when: "'already exists' not in cluster_ip.stderr"
  run_once: true

